线程的各种属性：包括：中断的状态、守护线程、未捕获异常的处理器，及不应使用的一些遗留特性。

中断线程：
当一个线程的run方法返回时（执行了方法体中最后一条语句，执行return语句返回），或者如果出现方法中未补获的异常，这个线程将终止。
还有一个废弃的stop方法也可以终止线程，出此没有办法强制一个终止。不过，interrupt方法可以用来请求终止一个线程。

当一个线程调用interrupt方法时候，就会设置这个线程的中断状态（interrupted status）。这是每个线程都会有的boolean标志。
每个线程都应该不时检查这个标志，以判断线程是否被中断。

要确定线程是否设置了中断状态，首先调用静态方法Thread.currentThread或得当前线程，然后调用isInterrupted方法。
while (!Thread.currentThread().isInterrupted()){
          //如果线程没有设置中断状态
       }

但是，当一个线程被阻塞，就无法检查中断状态。如果线程被阻塞，就无法检测中断状态，在一个被sleep或者wait调用阻塞的线程数调用interrupt，
会被InterruptedException异常中断。
         try{
             //如果线程被阻塞，就无法检测中断状态，在一个被sleep或者wait调用阻塞的线程数调用interrupt，会被InterruptedException异常中断
             Thread.sleep(50);
             //检测线程是否设置了中断状态
             while (!Thread.currentThread().isInterrupted()){
                 //如果线程没有设置中断状态
             }
         }
         catch (InterruptedException exception){
               System.out.println("线程中断异常："+exception);
         }

java.lang.Thread
void interrput()
向线程发送中断请求，线程中断状态被设置为true,但一个线程如果被sleep调用阻塞，则抛出InterruptedException异常

boolean isInterrupted()
测试一个线程是否被中断。

守护线程：
Java中，通过Thread类，我们可以创建2种线程，分为守护线程和用户线程。
守护线程是所有非守护线程的保姆，当所有非守护线程执行完成或退出了，即使还有守护线程在运行，JVM也会直接退出，因此守护线程通常是用来处理一些辅助工作。
反之，对于非守护线程，只要有一个在运行，JVM就不会退出。
典型的守护线程如垃圾回收GC线程，当用户线程都结束后，GC也就没有单独存在的必要，JVM直接退出。

java.lang.Thread
void setDaemon(boolean isDaemon)


未捕获异常处理器：
线程的run方法不能抛出任何检查异常，但是非检查异常会导致线程终止，在终止之前，会将异常传递到一个用于处理未捕获异常的处理器UncaughtExceptionHandler

java.lang.Thread
void setUncaughtExceptionHandler(UncaughtExceptionHandler eh)

线程优先级：
在java语言程序中，每个线程都有一个优先级，java 中的线程优先级的范围是1～10，默认的优先级是5。“高优先级线程”会优先于“低优先级线程”执行。
不同平台的优先级实现不同：
windows；windows7个优先级别
linux:面向linux的Oracle JVM会完全忽略优先级，所有的线程优先级都一样
在早期没有操作系统的线程中，线程优先级有用，现在不需要使用了。

java.lang.Thread
void setPriority(int newPriority)


线程同步：
建议直接看博客：https://www.cnblogs.com/mikechenshare/p/16736772.html
当使用多个线程来访问同一个数据时，将会导致数据不准确，相互之间产生冲突，非常容易出现线程安全问题,比如多个线程都在操作同一数据，都打算修改商品库存，这样就会导致数据不一致的问题。
线程同步的真实意思，其实是“排队”：几个线程之间要排队，一个一个对共享资源进行操作，而不是同时进行操作。
所以我们用同步机制来解决这些问题，加入同步锁以避免在该线程没有完成操作之前，被其他线程的调用，从而保证了该变量的唯一性和准确性。
线程同步常用的四种方式：
synchronized ：这种方式比较灵活,修饰一个方法或代码块，被修饰的代码块称为同步语句块。

ReentrantLock：ReentrantLock类是可重入、互斥、实现了Lock接口的锁，它与使用synchronized方法具有相同的基本行为和语义，并且扩展了其能力。
条件变量Condition：Condition是与ReentrantLock配合使用的，可以实现更精细的线程等待和通知机制。通过await()方法使线程等待条件满足，通过signal()或signalAll()方法通知等待的线程继续执行。
java.util.concurrent.locks.Condition
void await()   使当前线程等待，直到发出信号或 中断。
void signal(); 唤醒一个线程

使用原子变量实现线程同步：为了完成线程同步，我们将使用原子变量(Atomic***开头的)来实现。
ThreadLocal：实现线程同步，如果使用ThreadLocal管理变量，则每一个使用该变量的线程都获得该变量的副本，副本之间相互独立，这样每一个线程都可以随意修改自己的变量副本，而不会对其他线程产生影响，从而实现线程同步。

