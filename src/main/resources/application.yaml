server:
  #统一前缀
  servlet:
    context-path: /mediinfo-springdemo
    port: 8000
  ssl:
    protocol: TLS
    key-store: classpath:keystore.p12
    key-store-password: 123456
  #1、 一定不要使用kill -9 操作，使用kill -2 来关闭容器。这样才会触发java内部ShutdownHook操作，kill -9不会触发ShutdownHook。
  #2、可以使用端点监控 POST 请求 /actuator/shutdown 来执行优雅关机。
  shutdown: graceful #开启优雅停机
java:
  starter:
    message: 第一个自定义starter
    enabled: true
javastack:
  name: java参数绑定实例
  user:
    - tansir
    - zhangsan
  params:
    tel: 17600159370
    address: 杭州余杭区
  security:
    key: ${random.uuid}
    code: ${random.long(0,100)}
member:
  name: tom
  sex: 1
  age: 32
  birthday: 2000-12-12 12:44:55
#swagger doc link: https://springdoc.org/index.html#properties
springdoc:
  openapi:
    Info:
      title: 文档标题
      description: swagger描述信息
      version: 1.0.0
      license:
        name: Apache 2.0
        url: http://springdoc.org
    externalDocs:
      description: SpringShop Wiki Documentation
      url: https://springshop.wiki.github.org/docs
  swagger-ui:
    enabled: true
#mybatis配置
mybatis:
  mapper-locations: classpath:mybatis/**/*Mapper.xml # 配置mapper的扫描，找到所有的mapper.xml映射文件
  type-aliases-package: cn.mediinfo.springdemo.model #指定数据库实体类的全包路径，方便在SQL文件中使用实体类时不用写包名
  configuration:
    cache-enabled: true  #使全局的映射器启用或禁用缓存
    use-generated-keys: true #允许JDBC 支持自动生成主键
    default-executor-type: simple #配置默认的执行器.SIMPLE就是普通执行器;REUSE执行器会重用预处理语句(prepared statements);BATCH执行器将重用语句并执行批量更新
    #map-underscore-to-camel-case: true #使用驼峰命名法转换字段
    log-impl: org.apache.ibatis.logging.log4j2.Log4j2Impl #指定 MyBatis 所用日志的具体实现
#actuator 监控
management:
  endpoint:
    shutdown:
      enabled: true #启用endpoint
  endpoints:
    web: #通过web方式暴露所有端点
      discovery:
        enabled: true #// 开关/actuator路径下的端点发现
      exposure:
        include: "*"
      base-path: /actuator2 #//定义新的默认路径
spring:
  #设置安全验证用户的名称、密码和角色
  security:
    user:
      name: root
      password: admin
  cache:
    type: redis #指定需要使用的缓存组件
  task:
    #任务调度线程池
    scheduling:
      pool:
        size: 3 #线程数，默认1
    #任务执行线程池参数配置
    execution:
      pool:
        queue-capacity: 9999999 #队列大小，默认是Integer最大值
        core-size: 8 #核心线程数，默认8
        max-size: 9999999 #最大线程数，默认是Integer最大值
        allow-core-thread-timeout: true #是否允许核心线程超时，默认true
        keep-alive: 60s #线程保活时间，默认60s
  #自定义jdbc
  jdbc:
    template:
      fetch-size: -1
      max-rows: -1
      query-timeout: 30s
  data:
    #repositories加载配置有三种方式：deferred(默认值)、lazy、default
    #deferred，默认值，表示在启动的时候进行数据库字段的检查，repositories相关实例的初始化是lazy模式
    ###适合在开发和生产环境，万一多加或少加一个字段，就可以在启动阶段发现
    #lazy，表示在启动阶段不会进行数据的字段的检查，也不会初始化repositories相关的实例。
    ###适合加快项目启动速度，开发环境或者水平扩容的启动速度
    #default,默认加载方式，从spring2.0开始就不是默认值了，表示立即验证、初始化repositories实例，启动速度慢。但是最保险。
    jpa:
      repositories:
        bootstrap-mode: deferred
  session: #session 会话
    timeout: 30s #默认30分钟
  lifecycle:
    timeout-per-shutdown-phase: 30s
  #激活的profile
  profiles:
    default: dev
    active: dev1
    #include: dev，test
  #多数据源自定义master
  master:
    driver-class-name: com.mysql.cj.jdbc.Driver #可以不用指定，主流数据库都可以进行自动推断
    type: com.alibaba.druid.pool.DruidDataSource #手动指定连接池
    url: jdbc:mysql://172.19.125.100:3306/demo
    username: root
    password: admin123
  #多数据源自定义slave
  slave:
    driver-class-name: com.mysql.cj.jdbc.Driver #可以不用指定，主流数据库都可以进行自动推断
    type: com.alibaba.druid.pool.DruidDataSource #手动指定连接池
    url: jdbc:mysql://172.19.125.100:3306/demo
    username: root
    password: admin123
  #数据库配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver #可以不用指定，主流数据库都可以进行自动推断
    type: com.alibaba.druid.pool.DruidDataSource #手动指定连接池
    url: jdbc:mysql://172.19.125.100:3306/demo
    username: root
    password: admin123
    druid:
      initial-size: 20 #初始化连接池大小
      min-idle: 20 #连接池最小空闲数
      max-active: 20 #连接池最大连接数
      max-wait: 60000 #连接时最大等待时间（单位：毫秒）
      time-between-eviction-runs-millis: 60000 #检测关闭空闲连接的时间间隔（单位：毫秒）
      min-evictable-idle-time-millis: 300000 #保持空闲连接不被关闭的最小生存时间（单位：毫秒）
      validationQuery: SELECT 1 FROM DUAL
      validation-query-timeout: 1 # 检测连接是否有效的超时时间
      test-while-idle: true #检测空闲连接 #不影响性能，建议开启
      test-on-borrow: false # 检测获取连接时的有效性 # 开启后会影响性能
      spring.datasource.druid.test-on-return: false  # 检测归还连接时的有效性 # 开启后会影响性能
      pool-prepared-statements: false  # 是否开启PSCache，即是否缓存preparedStatement（提升写入、查询效率）# 建议在支持游标的数据库开启，例如：Oracle
      max-pool-prepared-statement-per-connection-size: -1 # 每个连接上PSCache的最大值  # 如果大于0，pool-prepared-statements自动开启
      stat-view-servlet: #配置监控页功能
        enabled: true # 配置统计页面
        reset-enable: false  #禁用HTML页面上的“重置”功能，会把所有监控的数据全部清空，一般不使用
        allow:  # 访问白名单
        deny: #黑名单
        login-username: admin # 访问用户名
        login-password: 123456  # 访问密码
        url-pattern: /druid/*  #配置DruidStatViewServlet的访问地址。后台监控页面的访问地址
      web-stat-filter: #监控web
        enabled: true # 配置统计页面过滤
        url-pattern: /* # 过滤路径 #监控所有
        exclusions: .js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/* #排除路径
        session-stat-enable: true # 开启session统计
        session-stat-max-count: 100 # session统计的最大个数
        principal-session-name: session_name
        principal-cookie-name: cookie_name
      aop-patterns: cn.mediinfo.* #Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
      # 配置默认的监控统计拦截的Filter
      # 不配置则监控页面中的SQL无法统计
      # stat - SQL监控配置
      # wall - SQL防火墙配置
      # slf4j - Druid日志配置
      filters: stat,wall,slf4j
      # 配置过滤器
      # SQL监控配置
      filter:
        stat:
          enabled: true
          db-type: mysql
          log-slow-sql: true #是否开启慢SQL统计
          slow-sql-millis: 3000 # 慢SQL时间
          slow-sql-log-level: ERROR # 慢SQL日志级别
          merge-sql: true # 是否开启合并SQL
        wall:
          enabled: true # SQL防火墙配置
          config:
            insert-allow: true # 允许新增
            update-allow: true # 允许更新
            update-where-none-check: true # 禁止更新时无条件
            delete-allow: true # 允许删除
            delete-where-none-check: true # 禁止删除时无条件
            alter-table-allow: false # 禁止对表ALTER
            drop-table-allow: false # 禁止对表DROP
        slf4j:
          enabled: true # Druid日志配置
          data-source-log-enabled: false # 关闭数据源日志
          connection-log-enabled: false # 关闭连接日志
          statement-executable-sql-log-enable: true # 开启执行SQL日志
          result-set-log-enabled: true # 开启结果映射日志
  #jpa配置
  jpa:
    properties:
      hibernate:
        #根据类型可以生成特定的sql,https://docs.jboss.org/hibernate/orm/6.1/javadocs/org/hibernate/dialect/package-summary.html
        dialect: org.hibernate.dialect.MySQL8Dialect
        #hbm2ddl策略有validate、update、create、create-drop、none
        hbm2ddl:
          auto: update #update更新模式，
        #开启hibernate statistics信息，如session,连接等日志
        generate_statistics: true
        #显示SQL日志语句
        show-sql: true
        #格式化SQL
        format_sql: true
        #添加HQL相关注释信息
        use_sql_comments: true
        #关联关系取数据的深度，默认3级
        max_fetch_depth: 3
        #批量fetch大小默认值为-1
        default_batch_fetch_size: -1
        transaction:
          #事务完成之前是否进行flush操作，即同步到DB里面，默认true
          flush_before_completion: true
          #事务结束之后是否关闭session
          auto_close_session: false
        #批量insert、update特殊说明
        jdbc:
          batch_size: 100
        #批量更新的时候还需要设置 order_updates=true
        order_updates: true
    #当通过spring.datasource.url无法判断数据源类型的时候可以通过如下方式指定
    database: mysql
    #在启动阶段根据数据库初始化schema，默认false,当我们用内存做测试数据库比较有用
    generate-ddl: false
    #是否在view层打开session,默认是true,其实大部分场景都不需要打开
    open-in-view: false
    #是否显示执行SQL
    show-sql: true
  #日志
  logging:
    level:
      sql: debug
      root: debug
      ### hibernate相关日志
      #显示SQL执行日志，如果开了这个show_sql就不用开了
      org.hibernate.SQL: debug
      #hibernate ID的生成日志
      org.hibernate.id: debug
      #hibernate 所有操作都是PreparedStatement，把SQL执行参数显示出来
      org.hibernate.type.descriptor.sql.BasicBinder: trace
      #SQL执行完提取的返回值
      org.hibernate.type.descriptor.sql: trace
      #请求参数
      org.hibernate.type: trace
      #缓存相关
      org.hibernate.cache: debug
      #统计hibernate执行状态
      org.hibernate.stat: debug
      #查看所有的缓存操作
      org.hibernate.event.internal: trace
      org.springframework.cache: trace
      ### 连接池相关日志
      #连接池的日志状态及连接池是否完好
      com.zaxxer.hikari: trace
      ###事务相关日志
      org.springframework.orm.jpa: debug
      org.springframework.orm.transaction: trace
      org.hibernate.engine.transaction.internal.TransactionImpl: debug
      ###分析connection 以及orm和data处理过程更全的日志
      org.springframework.data: trace
      org.springframework.orm: trace

  #thymeleaf模版引擎配置
  thymeleaf:
    enabled: true
    cache: true
    prefix: classpath:/templates/
    suffix: .html
  sql:
    init:
      mode: always #数据库初始化模式 EMBEEDED（默认，只对嵌入式数据库执行初始化） 外部数据库初始化改为 always
      continue-on-error: true #初始化错误是否继续启动
      #schema-locations:
      #  - classpath:init.sql #需要执行初始化的DDL脚本（建表）
      schema-locations:
        #- classpath:Sql/users.ddl  #spring security 初始化ddl  ####多数据源后初始化SQL策略似乎产生了和预期不一致的行为，先屏蔽####
      #data-locations:
      #- classpath:Sql/insert.sql #需要执行初始化的DML脚本（插入数据）
  quartz:
    auto-startup: true #是否自动启动 Quartz，true 或 false，默认值为 true
    startup-delay: 0s #//启动延迟，默认9s
    job-store-type: jdbc # Quartz 的 JobStore 类型，默认为 memory
    scheduler-name: Quartz # Quartz 的调度器名称
    jdbc:
      initialize-schema: always # always 总是初始化数据库  EMBEDDED 只初始化嵌入式数据库，默认值 NEVER从不初始化数据库
    overwrite-existing-jobs: true # 是否覆盖数据库中已经存在的持久化配置。不覆盖配置在配置更改后即使重启应用不会生效（仅针对JDBC情况）。
    wait-for-jobs-to-complete-on-shutdown: true # 应用关闭时是否等待所有的 Job 实例执行完成后再停止调度器
    #覆盖 /org/quartz/quzrtz.properties配置文件参数
    properties:
      org:
        quartz:
          threadpool:
            threadCount: 5 #默认线程数
#多文档示例
---
spring:
  config:
    activate:
      on-profile: dev1
---
spring:
  config:
    activate:
      on-profile: dev2
---
spring:
  profiles:
    #default: dev
    active: dev,pro #//可以通过命令行参数替换，默认是所有
    include: #//不会被替换，默认是空
        #- dev
        #- main
    group:
      dev:
        - dev1
        - dev2
